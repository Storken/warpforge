/* Variables */
:root {
	/* Light-mode colors */
	--light-primary-color: #302ae6;
	--light-secondary-color: #536390;
	--light-font-color: #424242;
	--light-bg-color: #fff;
	--light-code-bg-color: #ddddddff;
	--light-heading-color: #292922;
	--light-black: #333333ff;

	/* Dark-mode colors */
	--dark-black: #000000ff;
	--dark-primary-color: #511281;
	--dark-secondary-color: #4ca1a3;
	--dark-tertiary-color: #a5e1ad;
	--dark-font-color: #ffffffff;
	--dark-bg-color: #333333ff;
	--dark-code-bg-color: #666666ff;
	--dark-heading-color: #818cab;

	/* Color variables */
	--primary-color: var(--light-primary-color);
	--secondary-color: var(--light-secondary-color);
	--font-color: var(--light-font-color);
	--bg-color: var(--light-bg-color);
	--code-bg-color: var(--light-code-bg-color);
	--heading-color: var(--light-heading-color);
	--black: var(--light-black);

	/* Space */
	--space-xs: 4px;
	--space-sm: 8px;
	--space-md: 16px;
	--space-lg: 32px;
	--space-xl: 64px;
	--space-xxl: 128px;
}

@media (prefers-color-scheme: dark) {
	:root {
		--primary-color: var(--dark-primary-color);
		--secondary-color: var(--dark-secondary-color);
		--font-color: var(--dark-font-color);
		--bg-color: var(--dark-bg-color);
		--code-bg-color: var(--dark-code-bg-color);
		--heading-color: var(--dark-heading-color);
		--black: var(--dark-black);
	}
}

#dark-mode-checkbox ~ .container {
	/* Set light mode variables */
	--primary-color: var(--light-primary-color);
	--secondary-color: var(--light-secondary-color);
	--font-color: var(--light-font-color);
	--bg-color: var(--light-bg-color);
	--code-bg-color: var(--light-code-bg-color);
	--heading-color: var(--light-heading-color);
	--black: var(--light-black);
}

#dark-mode-checkbox:checked ~ .container {
	/* Set dark mode variables */
	--primary-color: var(--dark-primary-color);
	--secondary-color: var(--dark-secondary-color);
	--font-color: var(--dark-font-color);
	--bg-color: var(--dark-bg-color);
	--code-bg-color: var(--dark-code-bg-color);
	--heading-color: var(--dark-heading-color);
	--black: var(--dark-black);
}

/* Global fonts and styles */
* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

body {
	height: 100%;
	font-family: Verdana, Geneva, Tahoma, sans-serif;
	font-size: 16px;
}

body > input {
	overflow: hidden;
	width: 0;
	height: 0;
	opacity: 0;
	position: fixed;
	left: -10px;
}

.container {
	background-color: var(--bg-color);
	color: var(--font-color);
	display: flex;
	flex-direction: column;
	align-items: center;
	min-height: 100%;
}

/* Structural classes */

.header {
	width: 100%;
	max-width: 1200px;
	position: relative;
	display: flex;
	align-items: flex-start;
	justify-content: space-between;
	padding: var(--space-lg);
	margin-bottom: var(--space-xxl);
}

.header i {
	display: inline-block;
	text-overflow: ellipsis;
	max-width: 200px;
	white-space: nowrap;
	overflow: hidden;
}

.header h1 {
	margin: 0;
	word-break: break-all;
}

.content-wrapper {
	width: 100%;
	background-color: var(--code-bg-color);
	display: flex;
	justify-content: center;
	flex-grow: 2;
}

.content {
	width: 100%;
	max-width: 1200px;
	padding: var(--space-lg);
	padding-bottom: var(--space-xl);
}

.content-heading {
	padding-bottom: var(--space-lg);
}

h1,
h2,
h3,
h4,
h5 {
	color: var(--font-color);
	margin-bottom: var(--space-md);
	margin-top: var(--space-sm);
	font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS',
		sans-serif;
}

a {
	color: var(--font-color);
}

li {
	list-style: none;
	line-height: 1.4;
	margin-bottom: var(--space-sm);
}

dt {
	font-weight: bold;
	margin-bottom: var(--space-md);
	margin-top: var(--space-lg);
}

dt:first-of-type {
	margin-top: 0;
}

dd {
	margin: var(--space-sm) var(--space-lg);
}

/* Styling toggle */
.theme-switch-wrapper {
	display: flex;
	align-items: center;

	/* 
		Put the switch in the bottom of the screen
		so it doesn't cover the heading	
	*/
	position: fixed;
	bottom: var(--space-lg);
	right: var(--space-lg);
}

.theme-switch-wrapper:before {
	content: '';
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	width: 50px;
	height: 50px;
	background-color: var(--bg-color);
	border-radius: 100px;
}

/* Put the switch back in the header */
@media (min-width: 768px) {
	.theme-switch-wrapper {
		position: static;
	}
	.theme-switch-wrapper:before {
		content: initial;
	}
}

.theme-switch {
	display: inline-block;
	height: 22px;
	position: relative;
	width: 22px;
}

.theme-switch input {
	display: none;
}

.slider {
	background-color: var(--black);
	bottom: 0;
	cursor: pointer;
	left: 0;
	position: absolute;
	right: 0;
	top: 0;
	transform: rotateZ(-225deg);
	transition: 0.3s;
}

.slider:before {
	background-color: #fff;
	bottom: 2px;
	content: '';
	height: 18px;
	left: 2px;
	position: absolute;
	transition: 0.3s;
	width: 18px;
}

#dark-mode-checkbox:checked
	~ .container
	> .header
	> .theme-switch-wrapper
	> .theme-switch
	> .slider {
	background-color: var(--font-color);
	transform: rotateZ(-45deg);
}

#dark-mode-checkbox:checked
	~ .container
	> .header
	> .theme-switch-wrapper
	> .theme-switch
	> .slider:before {
	background-color: var(--bg-color);
	transform: translateX(10px);
}

.slider.round {
	border-radius: 34px;
}

.slider.round:before {
	border-radius: 50%;
}

#dark-mode-checkbox:checked
	~ .container
	> .header
	> .theme-switch-wrapper
	> .theme-switch
	> .slider
	> .sun-ray-1 {
	transform: scale(0.1, 0.1);
	opacity: 0;
}

#dark-mode-checkbox:checked
	~ .container
	> .header
	> .theme-switch-wrapper
	> .theme-switch
	> .slider
	> .sun-ray-1
	+ .sun-ray-2 {
	transform: scale(0.1, 0.1);
	opacity: 0;
}

.sun-ray-1,
.sun-ray-2 {
	transition: 0.2s all;
}

.sun-ray-1:before {
	content: '';
	position: absolute;
	left: -8px;
	top: 10px;
	height: 2px;
	width: 4px;
	background-color: var(--black);
}

.sun-ray-1:after {
	content: '';
	position: absolute;
	right: -8px;
	top: 10px;
	height: 2px;
	width: 4px;
	background-color: var(--black);
}

.sun-ray-2:before {
	content: '';
	position: absolute;
	left: 50%;
	top: -8px;
	transform: translateX(-50%);
	height: 4px;
	width: 2px;
	background-color: var(--black);
}

.sun-ray-2:after {
	content: '';
	position: absolute;
	left: 50%;
	top: 26px;
	transform: translateX(-50%);
	height: 4px;
	width: 2px;
	background-color: var(--black);
}

/* Index page */
.content-heading > strong {
	position: relative;
}

.content-heading > strong:before {
	content: '';
	border: 20px solid var(--code-bg-color);
	border-left-color: transparent;
	border-right-color: transparent;
	border-top-color: transparent;
	position: absolute;
	top: var(--space-md);
	left: 50%;
	transform: translateX(-50%);
	cursor: default;
}

/* Release & Module page */

.tab-content {
	height: 0;
	opacity: 0;
	pointer-events: none;
	word-break: break-all;
}

.tabs {
	padding: var(--space-lg);
	display: flex;
	flex-wrap: nowrap;
	width: 100%;
	max-width: 1200px;
}

.tabs > label {
	display: inline-block;
	cursor: pointer;
	margin-right: var(--space-md);
	position: relative;
}

.tab-radiobutton {
	display: none;
}

/* 
	If there's more than 2 tabs we can just add another count here.
	Unfortunately it doesn't seem like we can just iterate using
	a simple function here since .tab-radiobutton:nth-of-type(x) 
	needs to match .tab-content:nth-of-type(y). (x = y)
*/
.tab-radiobutton:nth-of-type(1):checked ~ .tabs > label:nth-of-type(1):before,
.tab-radiobutton:nth-of-type(2):checked ~ .tabs > label:nth-of-type(2):before {
	content: '';
	border: 20px solid var(--code-bg-color);
	border-left-color: transparent;
	border-right-color: transparent;
	border-top-color: transparent;
	position: absolute;
	top: var(--space-md);
	left: 50%;
	transform: translatex(-50%);
	cursor: default;
}

/* 
	Same as above, we want different nth-of-type to match which gets tricky,
	so for now we count manually.
*/
.tab-radiobutton:nth-of-type(1):checked
	~ .content-wrapper
	.tab-content:nth-of-type(1),
.tab-radiobutton:nth-of-type(2):checked
	~ .content-wrapper
	.tab-content:nth-of-type(2) {
	opacity: 1;
	height: initial;
	pointer-events: initial;
}
